/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.lujan.asistencia.vista;


import ar.com.lujan.asistencia.service.AlumnoRN;
import ar.com.lujan.asistencia.modelo.Alumno;
import ar.com.lujan.asistencia.modelo.AlumnoTableModel;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author usuario
 */
public class ABMAlumnos extends javax.swing.JDialog {
    //Instancias
    AlumnoRN alumnoRN = new AlumnoRN();
    //TableRowSorter<AlumnoTableModel> sorter = new TableRowSorter<>(alumnoRN.cargarGrilla());
    //Constructor
    public ABMAlumnos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.cargarGrilla();
        //Desabilitar los botones Borrar/Editar
        jbBorrar.setEnabled(false);
        jbEditar.setEnabled(false);
        //jtAlumnos.setRowSorter(sorter);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlAlumnos = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtAlumnos = new javax.swing.JTable();
        jbBorrar = new javax.swing.JButton();
        jbEditar = new javax.swing.JButton();
        jbAgregar = new javax.swing.JButton();
        jLBuscar = new javax.swing.JLabel();
        jtBuscar = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cbbBuscarEn = new javax.swing.JComboBox<>();
        jlAgregarAlumno = new javax.swing.JLabel();
        jcActivos = new javax.swing.JCheckBox();
        jcInactivos = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ABM Alumnos");
        setAlwaysOnTop(true);
        setModal(true);
        setResizable(false);

        jlAlumnos.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jtAlumnos.setModel(alumnoRN.cargarGrilla());
        jtAlumnos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jtAlumnos.setSurrendersFocusOnKeystroke(true);
        jtAlumnos.getTableHeader().setReorderingAllowed(false);
        jtAlumnos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtAlumnosMouseClicked(evt);
            }
        });
        jtAlumnos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtAlumnosKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jtAlumnos);

        jbBorrar.setText("Borrar");
        jbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarActionPerformed(evt);
            }
        });

        jbEditar.setText("Editar");
        jbEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarActionPerformed(evt);
            }
        });

        jbAgregar.setText("Agregar");
        jbAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAgregarActionPerformed(evt);
            }
        });

        jLBuscar.setText("Buscar:");

        jtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtBuscarActionPerformed(evt);
            }
        });
        jtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtBuscarKeyReleased(evt);
            }
        });

        jLabel2.setText("En :");

        cbbBuscarEn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Apellido", "Nombre", "DNI", "Genero", "Fecha de Nacimiento", "Email" }));
        cbbBuscarEn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbBuscarEnActionPerformed(evt);
            }
        });

        jlAgregarAlumno.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlAgregarAlumno.setText(" Alumnos");

        jcActivos.setText("Activos");
        jcActivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcActivosActionPerformed(evt);
            }
        });

        jcInactivos.setText("Inactivos");
        jcInactivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcInactivosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(jLBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(cbbBuscarEn, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jcActivos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcInactivos)
                .addGap(0, 23, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(213, 213, 213)
                        .addComponent(jbAgregar)
                        .addGap(67, 67, 67)
                        .addComponent(jbEditar)
                        .addGap(67, 67, 67)
                        .addComponent(jbBorrar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(361, 361, 361)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlAgregarAlumno)
                    .addComponent(jlAlumnos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jlAlumnos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlAgregarAlumno)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbbBuscarEn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jcActivos)
                        .addComponent(jcInactivos)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAgregar)
                    .addComponent(jbEditar)
                    .addComponent(jbBorrar))
                .addGap(18, 18, 18))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private void jtAlumnosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtAlumnosMouseClicked
        //Habilitar los botones borrar/editar al momento de seleccionar una fila
        jbBorrar.setEnabled(true);
        jbEditar.setEnabled(true);
        // TODO add your handling code here:
        //Si hace doble click, editar
        if (evt.getClickCount() > 1)
        {
            this.editar();
        }
    }//GEN-LAST:event_jtAlumnosMouseClicked
    
    private void jbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarActionPerformed
        // TODO add your handling code here:
        this.borrar();
        this.cargarGrilla();
    }//GEN-LAST:event_jbBorrarActionPerformed

    private void jbEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarActionPerformed
        // TODO add your handling code here:
        
        this.editar();  
    }//GEN-LAST:event_jbEditarActionPerformed

    private void jbAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAgregarActionPerformed
        // TODO add your handling code here:
        this.agregar();
    }//GEN-LAST:event_jbAgregarActionPerformed

    private void jtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtBuscarActionPerformed

    private void cbbBuscarEnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbBuscarEnActionPerformed
         // TODO add your handling code here:
        this.cargarGrilla();
    }//GEN-LAST:event_cbbBuscarEnActionPerformed

    private void jtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtBuscarKeyReleased
        // TODO add your handling code here:
        this.cargarGrilla();
    }//GEN-LAST:event_jtBuscarKeyReleased

    private void jtAlumnosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtAlumnosKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_DELETE){
            this.borrar();// used to consumed the key in the keytyped event
        }
    }//GEN-LAST:event_jtAlumnosKeyPressed

    private void jcInactivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcInactivosActionPerformed
        // TODO add your handling code here:
        //  jtAlumnos.setModel(alumnoRN.cargarGrillaInactivos());
        this.filtrarEstados();
    }//GEN-LAST:event_jcInactivosActionPerformed

    private void jcActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcActivosActionPerformed
        // TODO add your handling code here:
        this.filtrarEstados();
        //  jtAlumnos.setModel(alumnoRN.cargarGrillaActivos());
    }//GEN-LAST:event_jcActivosActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ABMAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ABMAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ABMAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ABMAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
     
        
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ABMAlumnos dialog = new ABMAlumnos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    //Variables Personalizadas
    private Alumno alumno;
    private boolean grabo = false;
    private String operacion;
   
    //Getter & Setter
    public String getOperacion() {
        return operacion;
    }
    public void setOperacion(String operacion) {
        this.operacion = operacion;
    }    
    public Alumno getAlumno() {
        return alumno;
    }
    public void setAlumno(Alumno alumno) {
        this.alumno = alumno;
    }
    public boolean isGrabo() {
        return grabo;
    }
    public void setGrabo(boolean Grabo) {
        this.grabo = Grabo;
    }
  
    
    //Metodos personalizados
    private void cargarGrilla(){
        // En caso de que el textfield se encuentre vacio , se cargara la grilla normalmente
        if (jtBuscar.getText().equals("")){
               jtAlumnos.setModel(alumnoRN.cargarGrilla());
        }
        // En caso de que el textfield tenga una escritura, se comprobara la opción del combobox seleccionada
        else{
            jtAlumnos.setModel(alumnoRN.cargarGrillaByFilters(jtBuscar.getText(), (String)cbbBuscarEn.getSelectedItem()));
        }   
        
        alumnoRN.formatoGrilla(jtAlumnos);
        //Desabilitar los botones Borrar/Editar, hasta volver a seleccionar fila
        jbBorrar.setEnabled(false);
        jbEditar.setEnabled(false);
    }
    
    private void filtrarEstados(){
        // En caso de que ambos checkbox se encuentren seleccionados , se cargara la grilla normalmente
        if (jcInactivos.isSelected() == true && jcActivos.isSelected()== true ){
            jtAlumnos.setModel(alumnoRN.cargarGrilla());
            alumnoRN.formatoGrilla(jtAlumnos);
        // En caso de que el checkbox Activo se encuentren seleccionados , se cargara la grilla solo con los alumnos activos         
        }else if (jcActivos.isSelected()){
            jtAlumnos.setModel(alumnoRN.cargarGrillaActivos());
            alumnoRN.formatoGrilla(jtAlumnos);
        // En caso de que el checkbox Inactivos se encuentren seleccionados , se cargara la grilla solo con los alumnos inactivos
        }else if (jcInactivos.isSelected()){
            jtAlumnos.setModel(alumnoRN.cargarGrillaInactivos());              
            alumnoRN.formatoGrilla(jtAlumnos);
        // En caso de que el ambos checkbox no se encuentren seleccionados , se cargara la grilla normalmente
        }else if (jcInactivos.isSelected() == false && jcActivos.isSelected() == false){
            jtAlumnos.setModel(alumnoRN.cargarGrilla());
            alumnoRN.formatoGrilla(jtAlumnos);
        }
    }
    
    
    private void cerrar(){
       this.dispose();
   }    
    
    private void agregar(){
        AgregarAlumnoUI agregarAlumnoUI = new AgregarAlumnoUI(null,true,"AGREGAR");//el primero es la herencia, o sea, extiende de jFrame. el segundo es si es modal o no
        agregarAlumnoUI.setLocationRelativeTo(null);
        agregarAlumnoUI.setVisible(true);
        this.cargarGrilla();   
        
        
    }
    private void editar(){
        //si hay una fila seleccionada        
        int r = jtAlumnos.getSelectedRow();
        if (r != -1)
        {
            //armar el objeto Alumno con los datos de la fila
            Alumno a=this.armarObjetoAlumno(r);
            //instanciar la ventana y pasarle el objeto alumno
            AgregarAlumnoUI editarAlumnoUI; //el primero es la herencia, o sea, extiende de jFrame. el segundo es si es modal o no, si esta por encima de todo
            editarAlumnoUI = new AgregarAlumnoUI(null,true,"EDITAR",a);
            editarAlumnoUI.setLocationRelativeTo(null); 
            editarAlumnoUI.setVisible(true);
            this.cargarGrilla(); //refresca la pantalla   
            jtAlumnos.setRowSelectionInterval(r,r); //selecciona la misma fila de antes
        }
    }
   
    private void borrar(){
        //levanta el indice de fila seleccionada
        int r = jtAlumnos.getSelectedRow();
        //si es distinto a -1 ( o sea que hay fila seleccionada
        if (r != -1){//Arma el objeto alumno con los datos de la fila
            Alumno a = this.armarObjetoAlumno(r);
            //verifica que no pertenezca a ningun curso
            if (alumnoRN.cantidadDeCursos(a)>=1){
                JOptionPane.showMessageDialog(this,"Error al intentar borrar, el alumno " + a.getID() + " - " + a.getNombre() +
                " " + a.getApellido()+ " pertenece a " + alumnoRN.cantidadDeCursos(a) + 
                " cursos y no se puede eliminar","Error",JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                if (alumnoRN.cantidadDeCursos(a)==0){//si no pertenece a ningun curso
                    int confirmDialog=JOptionPane.showConfirmDialog(this,"¿Confirma borrado: " +  + 
                    a.getID() + " - " + a.getNombre() + " " + a.getApellido()+ "?","Borrar Alumno",JOptionPane.YES_NO_OPTION);
                    if(confirmDialog == JOptionPane.YES_OPTION){//borra
                        alumnoRN.borrarAlumno(a);//Ejecuta el borrar alumno
                        JOptionPane.showMessageDialog(this, "Se ha eliminado exitosamente");
                    }
                }
            }     
            this.cargarGrilla();
        }
    }
    
    private Alumno armarObjetoAlumno(int r){
        Alumno a = new Alumno(); //instancia un objeto alumno
        SimpleDateFormat parser = new SimpleDateFormat("dd-MM-yyyy"); //esta variable sirve para almacenar un string dentro de una variable date
        a.setID((int) jtAlumnos.getModel().getValueAt(r,0));
        a.setApellido((String)jtAlumnos.getModel().getValueAt(r,1));
        a.setNombre((String)jtAlumnos.getModel().getValueAt(r,2));
        a.setDNI(Integer.parseInt(jtAlumnos.getModel().getValueAt(r,3).toString()));
        a.setGenero((String)jtAlumnos.getModel().getValueAt(r,4));
        if (jtAlumnos.getModel().getValueAt(r,5)!=null){
            try {
                a.setFechaDeNacimiento(parser.parse((String)jtAlumnos.getModel().getValueAt(r,5)));
            } catch (ParseException ex) {
                Logger.getLogger(ABMAlumnos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        a.setEmail((String)jtAlumnos.getModel().getValueAt(r,6));
        if (jtAlumnos.getModel().getValueAt(r,7).equals("Activo"))
            a.setEstado(true);
        if (jtAlumnos.getModel().getValueAt(r,7).equals("Inactivo"))
            a.setEstado(false);
        return a;
    } 
    
    
    
        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbbBuscarEn;
    private javax.swing.JLabel jLBuscar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbAgregar;
    private javax.swing.JButton jbBorrar;
    private javax.swing.JButton jbEditar;
    private javax.swing.JCheckBox jcActivos;
    private javax.swing.JCheckBox jcInactivos;
    private javax.swing.JLabel jlAgregarAlumno;
    private javax.swing.JLabel jlAlumnos;
    private javax.swing.JTable jtAlumnos;
    private javax.swing.JTextField jtBuscar;
    // End of variables declaration//GEN-END:variables

    
}
